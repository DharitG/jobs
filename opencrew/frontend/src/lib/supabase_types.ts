export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

// Placeholder Database interface.
// Replace this with types generated from your Supabase schema.
export interface Database {
  public: {
    Tables: {
      // Add your table definitions here, e.g.:
      // users: {
      //   Row: {
      //     id: string
      //     created_at: string
      //     email: string | null
      //     // ... other columns
      //   }
      //   Insert: {
      //     id?: string // Assuming it's generated by Supabase Auth
      //     created_at?: string
      //     email?: string | null
      //     // ... other columns
      //   }
      //   Update: {
      //     id?: string
      //     created_at?: string
      //     email?: string | null
      //     // ... other columns
      //   }
      //   Relationships: []
      // }
    }
    Views: {
      // Add your view definitions here
    }
    Functions: {
      // Add your function definitions here
    }
    Enums: {
      // Add your enum definitions here
    }
    CompositeTypes: {
      // Add your composite type definitions here
    }
  }
}

// Helper type for extracting Row types
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
// Helper type for extracting Insert types
export type TablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']
// Helper type for extracting Update types
export type TablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']